class Sound {
  
  /**
   * Constructor for Sound.
   */
  constructor() {
    setTimeout(() => {
      let audio = new Audio();
      let player = new CPlayer();
      player.init(Sound.SONG);
      // Using only 4 instruments. This saves a bit of space.
      player.generate();
      player.generate();
      player.generate();
      audio.src = URL.createObjectURL(new Blob([player.createWave()], {type: "audio/wav"}));
      // This is background music, so we set it to loop and turn the volume down a bit.
      audio.loop = true;
      audio.volume = 1.0;
      audio.playbackRate = 0.8;
      this.song = audio;
    }, 1);
  }
  
  /**
   * Starts playing the game music.
   */
  playSong() {
    this.song.play();
  }
  
  /**
   * This is background music, composed on and generated by the SoundBox.
   */
  static SONG = {
    songData: [
        { // Instrument 2
          i: [
          0, // OSC1_WAVEFORM
          0, // OSC1_VOL
          140, // OSC1_SEMI
          0, // OSC1_XENV
          0, // OSC2_WAVEFORM
          0, // OSC2_VOL
          140, // OSC2_SEMI
          0, // OSC2_DETUNE
          0, // OSC2_XENV
          255, // NOISE_VOL
          158, // ENV_ATTACK
          158, // ENV_SUSTAIN
          158, // ENV_RELEASE
          0, // ARP_CHORD
          0, // ARP_SPEED
          0, // LFO_WAVEFORM
          51, // LFO_AMT
          2, // LFO_FREQ
          1, // LFO_FX_FREQ
          2, // FX_FILTER
          58, // FX_FREQ
          239, // FX_RESONANCE
          0, // FX_DIST
          32, // FX_DRIVE
          88, // FX_PAN_AMT
          1, // FX_PAN_FREQ
          157, // FX_DELAY_AMT
          2 // FX_DELAY_TIME
          ],
          // Patterns
          p: [,,,,1,,2,,1,,2,,1,,2,,1,,2],
          // Columns
          c: [
            {n: [132],
             f: []},
            {n: [128],
             f: []}
          ]
        },
        { // Instrument 3
          i: [
          0, // OSC1_WAVEFORM
          109, // OSC1_VOL
          116, // OSC1_SEMI
          1, // OSC1_XENV
          0, // OSC2_WAVEFORM
          107, // OSC2_VOL
          116, // OSC2_SEMI
          0, // OSC2_DETUNE
          1, // OSC2_XENV
          0, // NOISE_VOL
          4, // ENV_ATTACK
          6, // ENV_SUSTAIN
          35, // ENV_RELEASE
          0, // ARP_CHORD
          0, // ARP_SPEED
          0, // LFO_WAVEFORM
          0, // LFO_AMT
          0, // LFO_FREQ
          0, // LFO_FX_FREQ
          2, // FX_FILTER
          14, // FX_FREQ
          0, // FX_RESONANCE
          0, // FX_DIST
          32, // FX_DRIVE
          0, // FX_PAN_AMT
          0, // FX_PAN_FREQ
          0, // FX_DELAY_AMT
          0 // FX_DELAY_TIME
          ],
          // Patterns
          p: [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
          // Columns
          c: [
            {n: [147,,,,,,147,,,,,,,,,,147,,,,,,147],
             f: []}
          ]
        },
        { // Instrument 4
          i: [
          0, // OSC1_WAVEFORM
          0, // OSC1_VOL
          140, // OSC1_SEMI
          0, // OSC1_XENV
          0, // OSC2_WAVEFORM
          0, // OSC2_VOL
          140, // OSC2_SEMI
          0, // OSC2_DETUNE
          0, // OSC2_XENV
          60, // NOISE_VOL
          4, // ENV_ATTACK
          10, // ENV_SUSTAIN
          34, // ENV_RELEASE
          0, // ARP_CHORD
          0, // ARP_SPEED
          0, // LFO_WAVEFORM
          187, // LFO_AMT
          5, // LFO_FREQ
          0, // LFO_FX_FREQ
          1, // FX_FILTER
          239, // FX_FREQ
          135, // FX_RESONANCE
          0, // FX_DIST
          32, // FX_DRIVE
          108, // FX_PAN_AMT
          5, // FX_PAN_FREQ
          16, // FX_DELAY_AMT
          4 // FX_DELAY_TIME
          ],
          // Patterns
          p: [,,,3,1,1,1,2,1,1,1,2,1,1,1,2,1,1,1,2],
          // Columns
          c: [
            {n: [,,,,,,,,147,,,,,,,,,,,,,,,,147],
             f: []},
            {n: [,,,,,,,,147,,,,,,,,,,,,,,,,147,,,,,,147],
             f: []},
            {n: [,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,147],
             f: []}
          ]
        }
      ],
      rowLen: 4134,   // In sample lengths
      patternLen: 32,  // Rows per pattern
      endPattern: 23,  // End pattern
      numChannels: 5  // Number of channels
    };

}